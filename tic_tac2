import tkinter as tk
from tkinter import messagebox
import random

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic-Tac-Toe")
        self.current_player = "X"  # Start with player X
        self.board = [" " for _ in range(9)]  # Represents the 3x3 board
        self.buttons = []  # To store button widgets
        self.ai_mode = False  # Flag to toggle AI mode

        # Create buttons for the board
        for i in range(9):
            button = tk.Button(root, text=" ", font=("Arial", 20), width=6, height=3,
                               command=lambda i=i: self.on_button_click(i))
            button.grid(row=i // 3, column=i % 3)
            self.buttons.append(button)

        # Add mode selection buttons
        mode_frame = tk.Frame(root)
        mode_frame.grid(row=3, column=0, columnspan=3, pady=10)

        two_player_button = tk.Button(mode_frame, text="2-Player Mode", font=("Arial", 12),
                                      command=self.set_two_player_mode)
        two_player_button.pack(side=tk.LEFT, padx=10)

        ai_button = tk.Button(mode_frame, text="AI Mode", font=("Arial", 12),
                              command=self.set_ai_mode)
        ai_button.pack(side=tk.LEFT, padx=10)

        # Add a reset button
        reset_button = tk.Button(root, text="Reset", font=("Arial", 16), command=self.reset_game)
        reset_button.grid(row=4, column=1, pady=10)

    def set_two_player_mode(self):
        self.ai_mode = False
        self.reset_game()
        messagebox.showinfo("Mode Selected", "2-Player Mode Activated!")

    def set_ai_mode(self):
        self.ai_mode = True
        self.reset_game()
        messagebox.showinfo("Mode Selected", "AI Mode Activated!")

    def on_button_click(self, index):
        # Handle player's move
        if self.board[index] == " ":
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner(self.current_player):
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.reset_game()
            elif self.is_board_full():
                messagebox.showinfo("Game Over", "It's a draw!")
                self.reset_game()
            else:
                # Switch players or let AI play
                if self.ai_mode and self.current_player == "X":
                    self.current_player = "O"
                    self.ai_move()
                else:
                    self.current_player = "O" if self.current_player == "X" else "X"

    def ai_move(self):
        # Simplified AI: Choose a random empty spot
        empty_spots = [i for i, spot in enumerate(self.board) if spot == " "]
        if empty_spots:
            ai_choice = random.choice(empty_spots)
            self.board[ai_choice] = "O"
            self.buttons[ai_choice].config(text="O")
            if self.check_winner("O"):
                messagebox.showinfo("Game Over", "AI wins!")
                self.reset_game()
            elif self.is_board_full():
                messagebox.showinfo("Game Over", "It's a draw!")
                self.reset_game()
            else:
                self.current_player = "X"

    def check_winner(self, player):
        # Check if the player has won
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]  # Diagonals
        ]
        for combo in winning_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] == player:
                return True
        return False

    def is_board_full(self):
        # Check if the board is full
        return " " not in self.board

    def reset_game(self):
        # Reset the game
        self.board = [" " for _ in range(9)]
        for button in self.buttons:
            button.config(text=" ")
        self.current_player = "X"

# Create the main window
root = tk.Tk()
game = TicTacToe(root)
root.mainloop()